<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 1. 定义日志格式 -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />

    <!-- 2. 定义日志文件存储路径 -->
    <!-- 在 Windows 上会是 C:/logs/your-app-name，在 Linux/Mac 上会是 /logs/your-app-name -->
    <property name="LOG_FILE_PATH" value="${LOG_PATH:-C:/logs}/${spring.application.name}" />

    <!-- 3. 控制台输出 (ConsoleAppender) -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 使用上面定义的日志格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 开发环境控制台日志显示颜色 -->
            <withJansi>true</withJansi>
        </encoder>
    </appender>

    <!-- 4. INFO 级别及以上日志文件输出 (按天滚动) -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件路径和名称 -->
        <file>${LOG_FILE_PATH}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 滚动文件名格式，每天一个文件 -->
            <fileNamePattern>${LOG_FILE_PATH}/info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!-- 只处理 INFO 及以上级别，且排除 ERROR -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch> <!-- 匹配到 ERROR 级别则拒绝 -->
            <onMismatch>ACCEPT</onMismatch> <!-- 不匹配则接受 -->
        </filter>
    </appender>

    <!-- 5. ERROR 级别日志文件输出 (按天滚动) -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE_PATH}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE_PATH}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!-- 只处理 ERROR 级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 6. 根日志配置 -->
    <root level="INFO">
        <!-- 默认添加控制台和文件 appender -->
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE_INFO" />
        <appender-ref ref="FILE_ERROR" />
    </root>

    <!-- 7. 针对特定包的日志级别配置 (可选) -->
    <!-- 例如，将 Spring Security 的日志级别设置为 DEBUG，以便调试认证过程 -->
    <logger name="org.springframework.security" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE_INFO" />
    </logger>

    <!-- 将你的业务代码包日志级别设置为 DEBUG，方便开发调试 -->
    <logger name="com.example" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE_INFO" />
    </logger>

    <!-- 8. 结合 Spring Profile 进行环境化配置 (非常强大！) -->
    <!-- 生产环境：关闭控制台输出，只写入文件 -->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="FILE_INFO" />
            <appender-ref ref="FILE_ERROR" />
        </root>
    </springProfile>

    <!-- 开发环境：开启控制台彩色输出，日志级别设为 DEBUG -->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE" />
        </root>
    </springProfile>

</configuration>